// 1. Inline example
// Funksjon som kan kalles direkte fra en knapp i HTML (onclick="inlineExample()")
function inlineExample() {
  // Vis en enkel varselboks til brukeren
  alert("Hei fra inline script üëã");
  // Logg til konsollen for feils√∏king
  console.log("Inline script kj√∏rt!");
}

// 2. Ekstern JS med defer
// N√•r DOM-en er ferdig lastet, binder vi hendelseslyttere til knapper
document.addEventListener("DOMContentLoaded", () => {
  // Hent knappen med id externalBtn (m√• finnes i HTML)
  const btn = document.getElementById("externalBtn");
  // Legg til en click-lytter som kj√∏rer en funksjon n√•r knappen trykkes
  btn.addEventListener("click", () => {
    // Vis varsel og logg for √• demonstrere at ekstern fil fungerer
    alert("Ekstern JavaScript fungerer! ‚úÖ");
    console.log("Ekstern fil kj√∏rt via 'defer'");
  });

  // 5. Dynamisk innlasting
  // Hent knappen som skal starte dynamisk lasting av ekstra script
  const loadBtn = document.getElementById("loadScriptBtn");
  // N√•r knappen trykkes, last ekstra script (stien er relativt fra HTML-fila)
  loadBtn.addEventListener("click", () => {
    // N√•r HTML-filen ligger i mappen Html/, m√• vi g√• opp √©n mappe for √• n√• JS/
    // Derfor bruker vi ../JS/extra.js som sti til ekstra script i JS-mappen.
    loadScript("../JS/extra.js");
  });
});

// 5. Dynamisk last-funksjon
// Denne funksjonen oppretter et nytt <script>-element og legger det i dokumentet
function loadScript(url) {
  // Oppretter et script-element
  const s = document.createElement("script");
  // Angir hvilken fil som skal lastes
  s.src = url;
  // N√•r scriptet er ferdig lastet, kj√∏r denne funksjonen (her: viser varsel)
  s.onload = () => alert("Ekstra script lastet!");
  // Hvis scriptet ikke kan lastes, vis en feilmelding
  s.onerror = () => alert("Kunne ikke laste script.");
  // Legg script-elementet inn i body for at nettleseren skal laste det
  document.body.appendChild(s);
}
